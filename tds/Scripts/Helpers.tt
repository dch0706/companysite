<#+
/// <summary>Gets the fully qualified name of the object.</summary>
/// <param name="defaultNamespace">The default namespace.</param>
/// <param name="template">The template.</param>
public static string GetFullyQualifiedName(
	string defaultNamespace,
	SitecoreItem item)
{
	return GetFullyQualifiedName(defaultNamespace, item, AsClassName);
}

/// <summary>Gets the fully qualified name of the object.</summary>
/// <param name="defaultNamespace">The default namespace.</param>
/// <param name="template">The template.</param>
/// <param name="nameFunc">The function to run the template name through.</param>
public static string GetFullyQualifiedName(
	string defaultNamespace,
	SitecoreItem item,
	Func<string, string> nameFunc)
{
	if (item.ReferencedItem)
	{
		return "global::" + item.TargetProjectName + "." + nameFunc(item.Name);
	}

	return string.Concat(
		GetNamespace(defaultNamespace, item, true),
		".",
		nameFunc(item.Name));
}

/// <summary>Gets the calculated namespace for the template.</summary>
public static string GetNamespace(
	string defaultNamespace,
	SitecoreItem item,
	bool includeGlobal = false)
{
	List<string> namespaceSegments = new List<string>();
	namespaceSegments.Add(defaultNamespace);
	namespaceSegments.Add(item.Namespace);

	// use an extension method in the supporting assembly
	string @namespace = AsNamespace(namespaceSegments);

	return includeGlobal ? string.Concat("global::", @namespace): @namespace;
}

/// <summary>
/// Takes multiple namespaces ('.' delimited strings) and joins them together.
/// </summary>
/// <param name="namespaces">The namespaces.</param>
public static string JoinNamespaces(params string[] namespaces)
{
	// leverage an extension method in the support assembly
	return AsNamespace(namespaces);
}

/// <summary>
/// <para>Gets a list of all fields from the template.</para>
/// <para>If desired, fields from all base templates will be included.</para>
/// </summary>
/// <param name="item">The item.</param>
/// <param name="includeBases">
///   if set to <c>true</c> include base template's fields.
/// </param>
public static IEnumerable<SitecoreField> GetFieldsForTemplate(
	SitecoreTemplate item,
	bool includeBases)
{
	var baseFields = includeBases ?
		SelectRecursive(
			item.BaseTemplates,
			i => i.BaseTemplates).SelectMany(t => t.Fields) :
		Enumerable.Empty<SitecoreField>();

	return item.Fields
		.Concat(baseFields)
		.Where(f => GetCustomProperty(f.Data, "ignore") != "true")
		.OrderBy(f => f.Name);
}

/// <summary>
/// <para>
///   Given a sitecore field, returns the name of the property to use.
/// </para>
/// <para>If the field is plural, it returns a plural property name</para>
/// </summary>
/// <param name="field">The field.</param>
/// <returns>A string to use for a property representing the field</returns>
public static string GetPropertyName(SitecoreField field)
{
	// has the field been configured in TDS with a custom name?
	string customName = GetCustomProperty(field.Data, "name");
	if (!string.IsNullOrEmpty(customName))
	{
		return customName;
	}

	bool isFieldPlural = IsFieldPlural(field);

	return AsPropertyName(field.Name, isFieldPlural);
}

/// <summary>
/// Determines whether the Sitecore Field holds multiple values.
/// </summary>
/// <param name="field">The field.</param>
/// <returns>
///   <c>true</c> if the field holds multiple values; otherwise, <c>false</c>.
/// </returns>
public static bool IsFieldPlural(SitecoreField field)
{
	string[] multipleValueFields = new string[]
	{
		"treelist",
		"treelistex",
		"treelist descriptive",
		"checklist",
		"multilist"
	};

	return multipleValueFields.Contains(field.Type.ToLower());
}

/// <summary>
/// Gets a custom propery from the data assuming it is querystring format
/// </summary>
/// <param name="data">A string in query string format.</param>
/// <param name="key">The key to get the value for.</param>
/// <returns>The value, or an empty string</returns>
public static string GetCustomProperty(string data, string key)
{
	if (string.IsNullOrEmpty(data))
	{
		return "";
	}

	string[] strArray = data.Split(new char[] { '&' });
	string keyEquals = key + "=";
	int length = keyEquals.Length;
	foreach (string keyValuePair in strArray)
	{
		if (
			(keyValuePair.Length > length) &&
			keyValuePair.StartsWith(keyEquals, StringComparison.OrdinalIgnoreCase))
		{
			return keyValuePair.Substring(length);
		}
	}

	return string.Empty;
}
#>
